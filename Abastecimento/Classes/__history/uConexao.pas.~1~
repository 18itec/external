unit uConexao;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Phys.IBBase, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.Comp.DataSet,inifiles, Forms;

type
   TConexao = class
       FConexao : TFDConnection;
       FBDriverLink: TFDPhysFBDriverLink;
       TB : TFDTable;
       DS : TDataSource;
       constructor Create;
       destructor  Destroy; override;
       function GetConexao : TFDConnection;
       function GetTable : TFDTable;
       function SetDataSouce : TDataSource;
       property Conexao : TFDConnection   read GetConexao;
   end;

implementation
{ TConexao }

constructor TConexao.Create;
var
  ArquivoINI, Servidor, Caminho, UserName, PassWord, LinkFD, Driver : string;
  Configuracoes : TIniFile;
begin
   ArquivoINI := ExtractFilePath(Application.ExeName) + 'conf.ini';

   if not FileExists(ArquivoINI) then
    begin
     raise Exception.Create('Não existe um arquivo de conexão');
     Exit;
    end;

  Configuracoes := TIniFile.Create(ArquivoINI);
   Try
      Servidor   := Configuracoes.ReadString('Configuracao', 'Servidor',   Servidor);
      Caminho    := Configuracoes.ReadString('Configuracao', 'DataBase',   Caminho);
      UserName   := Configuracoes.ReadString('Configuracao', 'UserName',   UserName);
      PassWord   := Configuracoes.ReadString('Configuracao', 'PassWord',   PassWord);
      LinkFD     := Configuracoes.ReadString('Configuracao', 'LinkFD',   LinkFD);
      Driver     := Configuracoes.ReadString('Configuracao', 'Driver',   Driver);
    Finally
      Configuracoes.Free;
    end;

   try
      FConexao := TFDConnection.Create(Application);
      FBDriverLink := TFDPhysFBDriverLink.Create(Application);
      FConexao.ConnectionName              := 'Conexao';
      FConexao.DriverName                  := Driver;
      FBDriverLink.VendorLib               := LinkFD;
      FConexao.LoginPrompt                 := False;
      FConexao.Connected                   := False;
      FConexao.Params.Values['DataBase']   := Servidor + ':' + Caminho;
      FConexao.Params.Values['User_Name']  := UserName;
      FConexao.Params.Values['Password']   := PassWord;
      FConexao.Connected                   := True;
   except
    on E: Exception do
      begin
        raise Exception.Create('Ocorreu O erro:' + #13 +  E.message);
      end;
   end;

end;

destructor TConexao.Destroy;
begin
  FConexao.Free;
  inherited;
end;

function TConexao.GetConexao: TFDConnection;
begin
   Result := FConexao;
end;

function TConexao.GetTable: TFDTable;
begin
 Result := TB;
end;

function TConexao.SetDataSouce: TDataSource;
begin
 Result := DS;
end;

end.
